// Code generated by go-bindata.
// sources:
// manifests/class.yaml
// manifests/clusterrole.yaml
// manifests/clusterrolebinding.yaml
// manifests/deployment.yaml
// manifests/role.yaml
// manifests/rolebinding.yaml
// manifests/serviceaccount.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsClassYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x41\x0a\xc2\x40\x0c\x85\xe1\xfd\x9c\x22\x17\x70\x8a\x3b\xc9\xd6\x23\x08\xee\x1f\x34\xad\xa1\x76\x32\xe4\x0d\xf5\xfa\x22\xd2\xf5\xff\x7f\x9b\xb7\x59\xe5\x31\x22\xb1\xda\xfd\x0d\xb2\xa0\xfb\xd3\x92\x1e\x4d\x85\xff\x50\xb7\x1b\xab\xc7\x74\x5c\xcb\x6e\x03\x33\x06\xb4\x88\x34\xec\xa6\x82\x0f\x2f\xb6\xb0\xf4\x8c\xc3\x7f\xcc\x52\x25\xba\x35\xbe\x7c\x19\x35\x72\x9d\xce\xe5\x1b\x00\x00\xff\xff\x8b\xd1\x6d\x3b\x6e\x00\x00\x00")

func manifestsClassYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsClassYaml,
		"manifests/class.yaml",
	)
}

func manifestsClassYaml() (*asset, error) {
	bytes, err := manifestsClassYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/class.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x31\x4f\xc4\x30\x0c\x85\xf7\xfe\x0a\xab\x33\x2d\x62\x43\x5d\x19\xd8\x19\x58\x10\x83\x2f\x7d\xdc\x45\x97\xc6\x91\xed\x14\x89\x5f\x8f\x5a\x45\x62\xe0\x86\xea\xa6\x3c\x45\x9f\xfd\xc9\xef\x1a\xf3\x3c\xd1\x4b\xaa\xe6\xd0\x37\x49\xe8\xb8\xc4\x77\xa8\x45\xc9\x13\xe9\x89\xc3\xc8\xd5\x2f\xa2\xf1\x87\x3d\x4a\x1e\xaf\xcf\x36\x46\x79\x5c\x9f\xba\x05\xce\x33\x3b\x4f\x1d\x51\xe6\x05\x13\xe1\xcb\x86\xa2\xb2\xc6\x6d\x1a\x3a\x68\xcd\x19\xda\x69\x4d\xb0\x8d\x1a\x88\x4b\x7c\x55\xa9\xc5\x26\xfa\xe8\xfb\xcf\x8e\x88\x48\x61\x52\x35\x60\xff\x2b\x9b\xda\x1c\xd9\x57\x49\x75\x81\x35\x68\x85\x9e\x76\xe0\x0c\xef\x1f\xa8\x4f\xd1\xf6\xf7\x9b\x3d\x5c\xb6\x10\x14\xec\xd8\xd2\x8c\x04\xc7\x3e\x77\x87\x30\x24\x8e\xcb\x31\xeb\x0d\x83\xb9\x28\x9f\xd1\x5a\xba\xe5\x6b\x44\x48\x6c\x76\xf0\xba\x83\x97\x60\x45\xf6\x7f\x1b\xff\x7a\xa9\x65\x6e\xa9\xb4\xb5\xbf\x01\x00\x00\xff\xff\xca\xd2\x36\xc1\xfd\x01\x00\x00")

func manifestsClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsClusterroleYaml,
		"manifests/clusterrole.yaml",
	)
}

func manifestsClusterroleYaml() (*asset, error) {
	bytes, err := manifestsClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x06\xcf\x33\xe2\x4d\xe6\xe6\x0f\x78\x5c\x58\xc5\x7b\x6f\x52\xe3\xb4\x9b\x4d\x87\x4e\x32\xa2\x4f\x2f\x19\x51\x44\xd1\x63\x48\xd5\xd7\x1f\x75\x94\x14\x26\xba\x89\xad\x54\xd8\x5e\x23\xae\x25\x05\x49\x4f\x8e\xb3\x3c\xc2\x8a\x68\x9a\xc8\x0e\xec\x47\x6e\x75\x51\x93\x37\xae\xa2\x69\x3c\x5e\x96\x51\xf4\x7c\xbd\x70\x27\x54\x0e\x5c\x79\x72\x44\x89\x4f\x98\xc8\x5a\x1a\x30\x97\x21\x9b\xae\xd2\x09\x30\x57\xda\xe1\x19\xbe\x96\x9e\x1a\xe8\xe3\xea\x3d\x6c\x15\x8f\x2b\xef\xb5\xa5\xea\x88\x3e\x01\x3f\xcb\xfd\x87\xce\xe8\x61\x77\xbb\x23\x43\x8e\xec\x41\x2f\x52\x97\x2d\x5e\xf2\xf6\x5c\x60\xa0\x6f\x25\x92\x42\x01\x39\xea\x2b\xc2\x17\x7a\xcb\x4e\x14\x30\x73\x8b\xd5\x99\x46\xec\x31\x77\xa7\x5f\x3b\xb8\x3f\x64\x06\x6b\xa9\x3b\x71\x96\x3b\xd3\x96\xff\x59\xc7\xbd\x07\x00\x00\xff\xff\xd8\xa5\x86\x9f\x5d\x01\x00\x00")

func manifestsClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsClusterrolebindingYaml,
		"manifests/clusterrolebinding.yaml",
	)
}

func manifestsClusterrolebindingYaml() (*asset, error) {
	bytes, err := manifestsClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x79\x01\xc9\xb0\x71\x81\x0b\x70\x67\x20\x4e\x61\xb4\xb6\x03\xb9\x48\xd1\x95\x30\x91\x8f\x54\x22\xe2\x4f\xc9\x91\x52\xf5\xe9\x0b\xc6\x48\xab\xd8\xf2\x3a\x5c\x91\x98\x6f\xce\x9c\x21\x87\xcf\xda\x9e\x14\xdd\xc1\x77\x6e\x34\xb0\x92\xb1\xd7\x8f\x08\x51\x3b\xab\x08\xbf\x04\x36\x6d\xe3\x62\x58\x3e\x41\x78\x99\x19\x08\x9f\x58\x58\x65\x44\x96\x0d\x14\xa1\x89\xb9\x0f\x6e\xd0\x09\x44\xc8\xa2\x47\x9d\xa2\x01\xbe\xd3\x35\x47\x45\xcb\x8c\x28\x4a\x60\x41\x3b\xa6\x08\x91\x8c\x1e\x8a\x4a\xd4\x01\x2c\xa0\x8c\x48\x60\x7c\xc7\x82\x73\x7c\x5a\x25\xad\x8e\x9f\xd0\xc5\xb7\x13\x11\x7b\x7f\x5d\x38\x05\xde\x8a\xbf\xee\x11\x06\x5d\x63\x5d\xd7\xae\xb7\x32\xcf\x13\xd5\xce\x0a\x6b\x8b\x30\x91\xcf\x6f\xb4\x46\x7f\x97\x36\xdc\x42\xd1\xcf\x9e\xc7\x42\xbb\x45\xba\xa8\x60\xb9\xab\xa2\xb8\xc0\x2d\x16\x17\x99\x2a\xb5\x16\x65\x22\x00\x3b\xa8\xc9\xf1\x5f\xcd\xfb\xed\x97\x4d\x75\xfc\x7e\xfc\xba\xd9\x55\xdb\xbb\x77\x08\xd1\xc0\x5d\x8f\xfb\xe0\x8c\xba\x08\xbc\xf6\xd1\xe8\x76\xc7\xfe\x33\xc6\x12\xcd\x35\x70\xeb\xbd\xae\xb9\x67\x8c\x8a\x1a\xdd\xa1\x88\x63\x14\x98\x42\x9f\x66\xad\xae\xbf\x1d\xab\x72\xf3\x69\x7b\xd8\x7f\x9c\x4d\x7e\x89\x45\x40\xab\x9d\x9d\xb5\xf8\x50\x1e\x1e\xb7\xc7\xed\x61\xbf\x29\xab\xfd\x7a\xb7\xf9\x38\xa3\x13\xa4\x48\x89\x13\x6e\x70\x5d\x6f\xb0\x4b\x53\x1a\xe7\x87\xc2\x0f\xf9\x19\xba\x50\x37\x29\xe7\x81\xe5\x87\xa2\x85\x4f\xbf\x36\x0a\xac\x9c\xd1\x98\x4d\xd5\x67\xa6\x7b\x4e\xd4\x36\x17\x0e\xd2\x27\x42\x50\xd4\xc4\xfc\xbf\xff\x79\x55\xaf\x56\x28\xd0\xc4\xa2\x8f\xf9\x0b\xa2\xe4\xab\x82\x0d\xff\x76\x36\xbd\x43\xed\xcc\xbb\x5c\x7f\xcb\xd8\x9f\x00\x00\x00\xff\xff\xff\xed\xb8\x1e\x75\x04\x00\x00")

func manifestsDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsDeploymentYaml,
		"manifests/deployment.yaml",
	)
}

func manifestsDeploymentYaml() (*asset, error) {
	bytes, err := manifestsDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xb1\x4e\x03\x31\x10\x44\x7b\x7f\xc5\xea\x6a\xee\x10\x1d\xf2\x0f\xd0\x53\xd0\xa0\x14\x1b\x7b\x48\x56\xe7\x78\xad\xf5\xfa\x90\xf8\x7a\x74\x56\xaa\x79\x9a\x37\x9a\x5d\x6a\x8e\xf4\xa9\x05\x81\x9b\x7c\xc1\xba\x68\x8d\x64\x57\x4e\x1b\x0f\xbf\xab\xc9\x1f\xbb\x68\xdd\xf6\xf7\xbe\x89\xbe\x1e\x6f\xe1\x01\xe7\xcc\xce\x31\x10\x55\x7e\x20\x52\x01\x67\xd8\x5a\x34\xed\x52\x6f\x2b\x7e\xfa\xda\x4c\x0f\x39\xcf\x60\xc1\x46\x41\x3f\xd7\x2b\x71\x93\x0f\xd3\xd1\x7a\xa4\xef\x65\xb9\x04\x22\x22\x43\xd7\x61\x09\xb3\x43\xcd\x4d\xa5\x7a\x7f\xca\x03\x76\x9d\xe2\x06\x5f\x5e\x68\x29\xd2\x67\xfe\xb2\xa7\xfb\x09\xc9\xc0\x8e\x93\x46\xcb\x4f\x6a\x53\x5e\xc2\x7f\x00\x00\x00\xff\xff\xca\x83\x75\xd0\xde\x00\x00\x00")

func manifestsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsRoleYaml,
		"manifests/role.yaml",
	)
}

func manifestsRoleYaml() (*asset, error) {
	bytes, err := manifestsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\x76\xe9\xee\x02\xdd\x69\x89\x76\x18\xcb\xa4\x40\x49\x1e\x72\xfa\xc0\x08\x82\x00\x19\x82\x1c\xe0\xbd\xf7\xff\xca\x92\x02\x8c\x9a\xe9\x87\x25\xb1\x2c\x0e\x0b\xff\x93\x55\x56\x09\x60\x13\xc6\x01\x7b\x3b\xa9\xf1\x05\x1b\xab\x0c\xeb\x57\x1d\x58\x3f\xf6\x4f\xb7\x51\xc3\x84\x0d\x83\x03\x10\xdc\x28\x40\x26\x4c\x64\x3e\x6b\x5c\x59\x16\x4f\x73\xf5\xc5\x74\xe7\x43\x46\xe6\x6a\x9f\xce\x14\x5b\x3d\x00\x0f\xb7\xf2\x1f\xd9\xce\x91\xbe\x63\xd4\x2e\xcd\x01\xdc\x5d\xcf\xb0\x69\xa6\x91\xe6\x83\x7d\x6c\x7e\xb7\x0c\x80\x85\x7f\x4d\x7b\x79\xf1\xc9\x5d\x03\x00\x00\xff\xff\x1d\xa0\x9b\xc4\x0c\x01\x00\x00")

func manifestsRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsRolebindingYaml,
		"manifests/rolebinding.yaml",
	)
}

func manifestsRolebindingYaml() (*asset, error) {
	bytes, err := manifestsRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xe1\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\xca\x4b\xcc\x4d\xb5\x52\x48\x4d\x2b\xd6\x2d\x28\xca\x2f\xcb\x04\x69\x4b\x2d\xe2\x02\x04\x00\x00\xff\xff\x9d\x37\x9b\x71\x44\x00\x00\x00")

func manifestsServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsServiceaccountYaml,
		"manifests/serviceaccount.yaml",
	)
}

func manifestsServiceaccountYaml() (*asset, error) {
	bytes, err := manifestsServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/class.yaml": manifestsClassYaml,
	"manifests/clusterrole.yaml": manifestsClusterroleYaml,
	"manifests/clusterrolebinding.yaml": manifestsClusterrolebindingYaml,
	"manifests/deployment.yaml": manifestsDeploymentYaml,
	"manifests/role.yaml": manifestsRoleYaml,
	"manifests/rolebinding.yaml": manifestsRolebindingYaml,
	"manifests/serviceaccount.yaml": manifestsServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": &bintree{nil, map[string]*bintree{
		"class.yaml": &bintree{manifestsClassYaml, map[string]*bintree{}},
		"clusterrole.yaml": &bintree{manifestsClusterroleYaml, map[string]*bintree{}},
		"clusterrolebinding.yaml": &bintree{manifestsClusterrolebindingYaml, map[string]*bintree{}},
		"deployment.yaml": &bintree{manifestsDeploymentYaml, map[string]*bintree{}},
		"role.yaml": &bintree{manifestsRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml": &bintree{manifestsRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": &bintree{manifestsServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

